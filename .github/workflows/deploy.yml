name: Build, Test and Deploy to Azure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_CONFIGURATION: 'Release'
  IMAGE_NAME: 'bloodsugerhistory'
  DOCKER_HUB_NAMESPACE: 'iceinplanet' # Replace with your Docker Hub username
  AZURE_WEBAPP_NAME: 'bloodsugarhistory' # Replace with your Azure Web App name

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: bloodsugar
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up .NET 9.0
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.17.0'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install backend dependencies
      run: dotnet restore ./backend/backend.csproj

    - name: Build backend
      run: dotnet build ./backend/backend.csproj --configuration Debug

    - name: Run xunit tests
      run: dotnet test ./xunit/Backend.Tests.csproj --verbosity normal

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Copy frontend build to backend
      run: |
        rm -rf backend/wwwroot
        mkdir -p backend/wwwroot
        cp -r frontend/build/* backend/wwwroot/

    - name: Run database migrations
      run: |
        cd backend
        dotnet tool restore
        dotnet ef database update --no-build --project backend.csproj
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=bloodsugar;Username=postgres;Password=password"
        ASPNETCORE_ENVIRONMENT: "Development"

    - name: Start backend
      run: |
        cd backend
        nohup dotnet run --urls http://localhost:3000 &
        sleep 10
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=bloodsugar;Username=postgres;Password=password"
        ASPNETCORE_ENVIRONMENT: "Development"

    # - name: Run Cypress E2E tests
    #   run: |
    #     cd frontend
    #     npx cypress run --browser chrome
    #   env:
    #     CYPRESS_baseUrl: "http://localhost:3000"

  build-and-push:
    runs-on: ubuntu-latest
    needs: test  # Only run if tests pass
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only run on push to main
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ env.DOCKER_HUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_HUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Delete old Docker images (keep last 2)
      env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        DOCKER_HUB_NAMESPACE: ${{ env.DOCKER_HUB_NAMESPACE }}
      run: |
        tags=$(curl -s -u "$DOCKER_HUB_USERNAME:$DOCKER_HUB_TOKEN" "https://hub.docker.com/v2/repositories/$DOCKER_HUB_NAMESPACE/$IMAGE_NAME/tags/?page_size=100" | jq -r 'if .results then .results | map(select(.name != "latest")) | sort_by(.last_updated) | reverse | .[2:] | .[].name else empty end')
        if [ -z "$tags" ]; then
          echo "No old tags to delete."
        else
          for tag in $tags; do
            echo "Deleting tag: $tag"
            curl -s -u "$DOCKER_HUB_USERNAME:$DOCKER_HUB_TOKEN" -X DELETE "https://hub.docker.com/v2/repositories/$DOCKER_HUB_NAMESPACE/$IMAGE_NAME/tags/$tag/"
          done
        fi

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  # Only run if build and push succeeds
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Only run on push to main
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Azure Web App (Container)
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: ${{ env.DOCKER_HUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} 
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Restart Azure Web App
        uses: azure/cli@v1
        with:
          inlineScript: az webapp restart --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} 