name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18.x'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Restore backend dependencies
      run: dotnet restore backend/backend.csproj
    
    - name: Build backend
      run: dotnet build backend/backend.csproj --no-restore
    
    - name: Run backend tests
      run: dotnet test backend/backend.csproj --no-build --verbosity normal
      env:
        MAILJET_STAGING_API_KEY: ${{ secrets.MAILJET_STAGING_API_KEY }}
        MAILJET_STAGING_API_SECRET: ${{ secrets.MAILJET_STAGING_API_SECRET }}
    
    - name: Install frontend dependencies
      run: npm ci
      working-directory: frontend
    
    - name: Build frontend
      run: npm run build
      working-directory: frontend
    
    - name: Run Cypress tests
      run: |
        npm run start:ci &
        npx wait-on http://localhost:3000
        npx cypress run
      working-directory: frontend
      env:
        MAILJET_STAGING_API_KEY: ${{ secrets.MAILJET_STAGING_API_KEY }}
        MAILJET_STAGING_API_SECRET: ${{ secrets.MAILJET_STAGING_API_SECRET }}

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Build and deploy to staging
      run: |
        # Add your staging deployment commands here
        echo "Deploying to staging environment"
      env:
        MAILJET_STAGING_API_KEY: ${{ secrets.MAILJET_STAGING_API_KEY }}
        MAILJET_STAGING_API_SECRET: ${{ secrets.MAILJET_STAGING_API_SECRET }}

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Build and deploy to production
      run: |
        # Add your production deployment commands here
        echo "Deploying to production environment"
      env:
        MAILJET_PRODUCTION_API_KEY: ${{ secrets.MAILJET_PRODUCTION_API_KEY }}
        MAILJET_PRODUCTION_API_SECRET: ${{ secrets.MAILJET_PRODUCTION_API_SECRET }} 